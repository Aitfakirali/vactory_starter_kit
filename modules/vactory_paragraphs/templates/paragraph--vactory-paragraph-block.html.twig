{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{#  Paragraph display #}

{% set paragraph_hide = paragraph.field_paragraph_hide_sm.0.value > 0  and paragraph.field_paragraph_hide_lg.0.value > 0 ? 'd-none' : '' %}
{% set paragraph_hide = paragraph_hide is empty and paragraph.field_paragraph_hide_lg.0.value > 0 ? 'd-md-none' : '' %}
{% set paragraph_hide = paragraph_hide is empty and paragraph.field_paragraph_hide_sm.0.value > 0 ? 'd-none d-md-block' : ''%}

{# Background image position #}

{% set bg_x = (paragraph.field_position_image_x.0.value != null and paragraph.field_position_image_x.0.value != 'centrer') ? "bg-align-" ~ paragraph.field_position_image_x.0.value : '' %}
{% set bg_y = (paragraph.field_position_image_y.0.value != null and paragraph.field_position_image_y.0.value != 'centrer') ? " bg-align-" ~ paragraph.field_position_image_y.0.value : '' %}
{% set bg_size = (paragraph.field_size_image.0.value != null and paragraph.field_size_image.0.value != 'cover') ? " bg-size-" ~ paragraph.field_size_image.0.value : '' %}
{% set bg_position_classes = bg_x ~ bg_y ~ bg_size %}

{# Paragraph classes #}

{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  paragraph_hide
] %}

{% set title_classes = [
  'title',
] %}

{# Paragraph container #}

{% if paragraph.paragraph_container %}
  {% set layout_width = paragraph.paragraph_container.getString() %}
  {% set parallax_class = (paragraph.paragraph_background_parallax.0.value > 0) ? "paragraph_parallax" : 0 %}
  {% set containerClasses = layout_width == 'narrow_width' ? 'container' : '' %}
  {% set containerClasses = layout_width == 'full_width' ? 'container-fluid' : containerClasses %}
  {% set containerClasses = containerClasses is empty ? 'no-container' : containerClasses %}
{% endif %}

{# Paragraph background opener #}

{% set background_attribute = create_attribute() %}
{# Set background color if exist #}
{% set background_color = paragraph.field_background_color and paragraph.field_background_color.color is not empty ? paragraph.field_background_color.color|lower : '' %}
{# Set background image if exist #}
{% set background_image_url = paragraph.paragraph_background_image and paragraph.paragraph_background_image.0.value.target_id is not empty ? get_image_url(paragraph.paragraph_background_image.0.value.target_id) : '' %}
{% set bg_classes = [
  paragraph_hide,
  bg_position_classes
] %}

{% if background_image_url is not empty and background_color is empty %}
  {% set bg_classes = bg_classes|merge(['has-background--image', parallax_class]) %}
  {% set style = 'background-image: url(' ~ background_image_url ~ ')' %}
{% elseif background_color is not empty and background_color != "#ff0000" and background_image_url is empty %}
  {% set bg_classes = bg_classes|merge(['has-background--solid']) %}
  {% set style = 'background-color: ' ~ background_color %}
{% elseif background_color is not empty and background_image_url is not empty %}
  {#  In Case background_color and background_image both set#}
  {% set bg_classes = bg_classes|merge(['has-background--image', 'has-background--solid', parallax_class]) %}
  {% set style = background_color != "#ff0000" ? 'background-color: ' ~ background_color ~ '; background-image: url(' ~ background_image_url ~ ')' : 'background-image: url(' ~ background_image_url ~ ')' %}
{% endif %}

{% if background_image_url is not empty or (background_color is not empty and background_color != "#ff0000") %}
  <div {{ background_attribute.addClass(bg_classes) }} style="{{ style }}">
{% endif %}

{# Paragraph content #}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div class="{{ containerClasses }}">
      {% if content.field_vactory_flag.0['#markup'] == 1 %}
        <h2{{ title_attributes.addClass(title_classes) }}>
          {{ noWrapper(hideLabel(addAttributes(content.field_vactory_title))) }}
        </h2>
      {% endif %}
      {{ title_suffix }}
      {% if content.field_vactory_body.0 is defined %}
        <div class="block-intro">
          {{ noWrapper(hideLabel(addAttributes(content.field_vactory_body))) }}
        </div>
      {% endif %}
      {% if content.field_vactory_block|default %}
        <div class="">
          {{ content.field_vactory_block }}
        </div>
      {% endif %}
    </div>
  </div>
{% endblock paragraph %}

{# Paragraph background closer #}

{% if background_image_url is not empty or (background_color is not empty and background_color != "#ff0000") %}
  </div>
{% endif %}
