<?php

/**
 * @file
 * Module related hooks.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\Request;

/**
 * Implements hook_views_pre_view().
 */
function vactory_views_pretty_path_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  $config = \Drupal::config('vactory_views_pretty_path.settings');
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $paths_infos = $config->get('paths');
  if (isset($paths_infos) && is_array($paths_infos)) {
    // Get concerned path from module settings.
    $concerned_paths = array_map(function ($el) {
      return $el['path'];
    }, $paths_infos);
    $current_path = \Drupal::service('path.current')->getPath();
    if (in_array($current_path, $concerned_paths)) {
      $view_filters = $view->display_handler->getOption('filters');
      $current_path_index = array_search($current_path, $concerned_paths);
      $view_filter_name_map_str = $paths_infos[$current_path_index]['filter_map_container'][$langcode]['views_filter_name_map'];
      $view_filter_name_map = get_view_filter_name_map($view_filter_name_map_str);
      $request_params = Drupal::request()->request->all();
      if (!empty($request_params)) {
        foreach ($view_filter_name_map as $filter_id => $filter_name) {
          if (isset($view_filters[$filter_id])) {
            $filter_identifier = $view_filters[$filter_id]['expose']['identifier'];
            if (in_array($filter_identifier, array_keys($request_params))) {
              if (is_array($request_params[$filter_identifier])) {
                foreach ($request_params[$filter_identifier] as $index => $tid) {
                  $view_filters[$filter_id]['value'][$tid] = $tid;
                }
              }
              else {
                $view_filters[$filter_id]['value'] = ['target_id' => $request_params[$filter_identifier]];
              }
              $view->display_handler->overrideOption('filters', $view_filters);
            }
          }
        }
      }
    }
  }
}

/**
 * Get view filter name mapping.
 */
function get_view_filter_name_map($view_filter_map_str) {
  $view_filter_map = [];
  $view_filter_rows = explode(PHP_EOL, $view_filter_map_str);
  foreach ($view_filter_rows as $view_filter_row) {
    if (!empty($view_filter_row)) {
      $filter_infos = explode('|', $view_filter_row);
      $view_filter_map[$filter_infos[0]] = str_replace("\r", '', $filter_infos[1]);
    }
  }
  return $view_filter_map;
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_views_pretty_path_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'taxonomy_term') {
    $fields['pretty_path'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Pretty path name'))
      ->setDescription(t('Term name in path, if empty it would be generated automatically from the term name (spaces should be replaced with "-")'))
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->addConstraint('UniqueField', []);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function vactory_views_pretty_path_taxonomy_term_presave(EntityInterface $entity) {
  if ($entity->hasField('pretty_path')) {
    $pretty_path = $entity->get('pretty_path')->getValue();
    if (empty($pretty_path) && !empty($entity->getName())) {
      $pretty_path = Drupal::service('vactory_core.tools')->unaccent($entity->getName(), '-');
      $entity->set('pretty_path', strtolower($pretty_path));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_views_pretty_path_preprocess_pager(&$variables) {
  $current_path = Drupal::service('path.current')->getPath();
  $pretty_path_processor = Drupal::service('vactory_views_pretty_path.path_processor');
  if (isset($variables['items']['pages'])) {
    foreach ($variables['items']['pages'] as &$page) {
      if (isset($page['href'])) {
        vactory_views_pretty_path_processor($current_path, $pretty_path_processor, $page['href']);
      }
    }
  }
  if (isset($variables['items']['next']['href'])) {
    vactory_views_pretty_path_processor($current_path, $pretty_path_processor, $variables['items']['next']['href']);
  }
  if (isset($variables['items']['previous']['href'])) {
    vactory_views_pretty_path_processor($current_path, $pretty_path_processor, $variables['items']['previous']['href']);
  }
  if (isset($variables['items']['first']['href'])) {
    vactory_views_pretty_path_processor($current_path, $pretty_path_processor, $variables['items']['first']['href']);
  }
  if (isset($variables['items']['last']['href'])) {
    vactory_views_pretty_path_processor($current_path, $pretty_path_processor, $variables['items']['last']['href']);
  }
}

/**
 * Apply pretty path processor on given href link.
 */
function vactory_views_pretty_path_processor($current_path, $pretty_path_processor, &$href) {
  $langcode = Drupal::languageManager()->getCurrentLanguage()->getId();
  $href = str_replace('?', '', $href);
  parse_str($href, $params);
  $request = new Request();
  foreach ($params as $key => $value) {
    $request->query->set($key, $value);
  }
  $options = ['from_pager' => TRUE];
  $href = $pretty_path_processor->processOutbound($current_path, $options, $request);
  $query_string = http_build_query($request->query->all());
  $href = '/' . $langcode . $href;
  if (!empty($query_string)) {
    $href .= '?' . $query_string;
  }
}
