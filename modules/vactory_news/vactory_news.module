<?php

/**
 * @file
 * This was auto-generated by Vactory Generator module.
 */

use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\block_content\Entity\BlockContent;

/**
 * Implements hook_theme().
 */
function vactory_news_theme($existing, $type, $theme, $path) {
  return [
    // Node > card.
    'node__vactory_news__card'        => [
      'base hook' => 'node',
      'template'  => 'card',
    ],
    // Node > card inline.
    'node__vactory_news__card_inline' => [
      'base hook' => 'node',
      'template'  => 'card-inline',
    ],
    // Node > Masonry.
    'node__vactory_news__masonry'     => [
      'base hook' => 'node',
      'template'  => 'masonry',
    ],
    // Node > full.
    'node__vactory_news__full'        => [
      'base hook' => 'node',
      'template'  => 'full',
    ],
    // Node > Smart search.
    'node__vactory_news__smart_search'        => [
      'base hook' => 'node',
      'template'  => 'smart-search',
    ],
     // Node > mur.
    'node__vactory_news__mur'        => [
      'base hook' => 'node',
      'template'  => 'mur',
    ],

    // Node > full.
    'node__view__vactory_news__mosaique'        => [
      'base hook' => 'node',
      'template'  => 'block-mosaique',
    ],
    'vactory_news_block_filtred_by_taxonomy' => [
      'template' => 'block-filtred-by-taxonomy',
      "variables" => [
        "content" => [],
      ],
    ],
  ];
}

/**
 * Implements hook_views_pre_view().
 */
function vactory_news_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Check if header is enabled.
  $is_header_enabled = !empty($view->display_handler->options['header']) ? TRUE : FALSE;
  if ($view->id() == 'vactory_news' && $is_header_enabled) {
    // Get the header block machine name.
    $block_machine_name = $view->display_handler->options['header']['entity_block_content']['target'];
    $entity_manager = \Drupal::service('entity_type.manager');
    // Load Block by machine name.
    $block = $entity_manager->getStorage('block_content')
      ->loadByProperties(['block_machine_name' => $block_machine_name]);

    if (is_array($block) && reset($block) instanceof BlockContent) {
      // Get block view display.
      $block_content = $entity_manager->getViewBuilder('block_content')
        ->view(reset($block));
      // Override the view header for the current display.
      $item = [
        'id' => 'area_text_custom',
        'table' => 'views',
        'field' => 'area_text_custom',
        'relationship' => 'none',
        'group_type' => 'none',
        'admin_label' => '',
        'empty' => TRUE,
        'tokenize' => FALSE,
        'content' => \Drupal::service('renderer')
          ->render($block_content),
        'plugin_id' => 'text_custom',
      ];
      $view->setHandler($display_id, 'header', 'area_text_custom', $item);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_news_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view instanceof ViewExecutable && $view->id() === 'vactory_news' && $view->display_handler->getPluginId() === 'block') {
    $args = $view->args;
    if (count($args) > 1 && isset($args[1]) && is_array($args[1]) ) {
      $meta_data = $args[1];
      $term = Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->load($args[0]);
      $parents = $term->get('parent')->getValue();
      $parents = array_filter($parents, function ($parent) {
        return $parent['target_id'] !== '0' && $parent['target_id'] !== 0;
      });
      $has_parent = !empty($parents);
      if (isset($meta_data['override_more_link']) && $meta_data['override_more_link']) {
        $use_more = $view->display_handler->options['use_more'];
        $link_display = $view->display_handler->options['link_display'];
        if ($use_more && $link_display) {
          $handlers_configurations = $view->displayHandlers->getConfiguration();
          if (isset($handlers_configurations[$link_display])) {
            $filters = $handlers_configurations[$link_display]['display_options']['filters'];
            if (!empty($filters)) {
              $filter_name = '';
              // Check in view filter if we have taxonomy tid depth filter.
              $taxonomy_tid_depth_filter = array_filter($filters, function ($filter) {
                return $filter['plugin_id'] === 'taxonomy_index_tid_depth';
              });
              // In case of parent term and view taxonomy tid depth filter exist.
              if (!$has_parent && !empty($taxonomy_tid_depth_filter)) {
                $filter_name = reset($taxonomy_tid_depth_filter)['id'];
              }
              if (empty($filter_name)) {
                $filters_ids = array_map(function ($filter) {
                  return isset($filter['expose']['identifier']) ? $filter['expose']['identifier'] : $filter['id'];
                }, $filters);
                $field_name = $meta_data['field_name'];
                $matches = preg_grep('#(.)*' . $field_name . '(.)*#', array_flip($filters_ids));
                if (!empty($matches)) {
                  $filter_name = array_keys($matches)[0];
                }
              }
              if (isset($variables['more']['#url']) && !empty($filter_name)) {
                $listing_route = 'view.' . $view->id() . '.' . $link_display;
                $variables['more']['#url'] = Url::fromRoute($listing_route, [$filter_name => $args[0]]);
              }
            }
          }
        }
      }
    }
  }
}
