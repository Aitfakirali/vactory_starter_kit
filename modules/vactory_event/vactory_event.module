<?php

/**
 * @file
 * This was auto-generated by Vactory Generator module.
 */

use Drupal\Core\Url;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function vactory_event_theme($existing, $type, $theme, $path) {
  return [
    // Node > card.
    'node__vactory_event__card' => [
      'base hook' => 'node',
      'template'  => 'card',
    ],
    // Node > card inline.
    'node__vactory_event__card_inline' => [
      'base hook' => 'node',
      'template'  => 'card-inline',
    ],
    // Node > Masonry.
    'node__vactory_event__masonry' => [
      'base hook' => 'node',
      'template'  => 'masonry',
    ],
    // Node > full.
    'node__vactory_event__full' => [
      'base hook' => 'node',
      'template'  => 'full',
    ],
    // Node > Smart search.
    'node__vactory_event__smart_search' => [
      'base hook' => 'node',
      'template'  => 'smart-search',
    ],
     // Node > Mur.
    'node__vactory_event__mur' => [
      'base hook' => 'node',
      'template'  => 'mur',
    ],

    'vactory_event_block_filtered_by_taxonomy' => [
      'template' => 'block-filtered-by-taxonomy',
      'variables' => [
        'content' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function vactory_event_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'vactory_event') {
    $node = $variables['node'];
    $date = $node->get('field_vactory_date_interval');

    if (isset($date) && !empty($date)) {
      $date = $node->get('field_vactory_date_interval')->getValue();

      if (!isset($date[0])) {
        return;
      }

      $start_date = $date[0]['value'];
      $end_date = $date[0]['end_value'];
      $date_formater = \Drupal::service('date.formatter');
      $timezones = 'UTC';

      // Start date.
      if (isset($start_date) && !empty($start_date)) {
        $variables['content']['field_vactory_date_interval']['date_start'] = [
          'day_full'  => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'l', $timezones),
            '#attributes' => ['class' => ['day']],
          ],
          'day_short' => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'd', $timezones),
            '#attributes' => ['class' => ['day-short']],
          ],
          'month'     => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'F', $timezones),
            '#attributes' => ['class' => ['month']],
          ],
        ];

        $variables['content']['field_vactory_date_interval']['date_start_raw'] = [
          'day_full'    => $date_formater->format(strtotime($start_date), 'custom', 'l', $timezones),
          'day_short'   => $date_formater->format(strtotime($start_date), 'custom', 'd', $timezones),
          'month'       => $date_formater->format(strtotime($start_date), 'custom', 'F', $timezones),
          'month_short' => $date_formater->format(strtotime($start_date), 'custom', 'M', $timezones),
        ];
      }

      // End date.
      if (isset($end_date) && !empty($end_date) && $end_date != $start_date) {
        $variables['content']['field_vactory_date_interval']['date_end'] = [
          'day_full'  => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'l', $timezones),
            '#attributes' => ['class' => ['day']],
          ],
          'day_short' => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'd', $timezones),
            '#attributes' => ['class' => ['day-short']],
          ],
          'month'     => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'F', $timezones),
            '#attributes' => ['class' => ['month']],
          ],
        ];

        $variables['content']['field_vactory_date_interval']['date_end_raw'] = [
          'day_full'    => $date_formater->format(strtotime($end_date), 'custom', 'l', $timezones),
          'day_short'   => $date_formater->format(strtotime($end_date), 'custom', 'd', $timezones),
          'month'       => $date_formater->format(strtotime($end_date), 'custom', 'F', $timezones),
          'month_short' => $date_formater->format(strtotime($end_date), 'custom', 'M', $timezones),
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_event_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view instanceof ViewExecutable && $view->id() === 'vactory_event' && $view->display_handler->getPluginId() === 'block') {
    $args = $view->args;
    $arguments_infos = $view->argument;
    if (count($args) > 2 && isset($args[2]) && is_array($args[2]) ) {
      $meta_data = $args[2];
      if (isset($meta_data['override_more_link']) && $meta_data['override_more_link']) {
        $use_more = $view->display_handler->options['use_more'];
        $link_display = $view->display_handler->options['link_display'];
        if ($use_more && $link_display) {
          $handlers_configurations = $view->displayHandlers->getConfiguration();
          if (isset($handlers_configurations[$link_display])) {
            $filters = $handlers_configurations[$link_display]['display_options']['filters'];
            if (!empty($filters)) {
              $filters_ids = array_map(function ($filter) {
                return isset($filter['expose']['identifier']) ? $filter['expose']['identifier'] : $filter['id'];
              }, $filters);
              if (!empty($meta_data['field_name'])) {
                $arguments_infos = array_map(function ($arg_info) {
                  return $arg_info->definition['field_name'];
                }, $arguments_infos);
                $arguments_infos = array_values($arguments_infos);
                $field_names = $meta_data['field_name'];
                $more_link_params = [];
                foreach ($field_names as $field_name) {
                  $filter_index = array_search($field_name, $arguments_infos);
                  if ($filter_index !== FALSE) {
                    $matches = preg_grep('#(.)*' . $field_name . '(.)*#', array_flip($filters_ids));
                    if (!empty($matches)) {
                      $filter_name = array_keys($matches)[0];
                      $more_link_params[$filter_name] = $args[$filter_index];
                    }
                  }
                }
                if (isset($variables['more']['#url'])) {
                  $listing_route = 'view.' . $view->id() . '.' . $link_display;
                  $variables['more']['#url'] = Url::fromRoute($listing_route, $more_link_params);
                }
              }
            }
          }
        }
      }
    }
  }
}
