<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\Core\Config\Entity\ConfigEntityBase;
/**
 * Implements hook_page_attachments_alter().
 */
function vactory_structred_data_page_attachments_alter(array &$attachments) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $allowed_bundles = ['vactory_news', 'vactory_events'];

	if (!$node instanceof \Drupal\node\NodeInterface) {
    return;
  }

	if (!in_array($node->bundle(), $allowed_bundles)) {
    return;
  }
  // Get fields
  $nid = $node->id();
  $title = $node->label();
  $description = $node->get('node_summary')->getValue()[0]["value"];

  $items = [];

	if($node->bundle() == "vactory_news") {
    $items['@type'] ='NewsArticle';
    $items['title'] =$title;
    $items['description'] =$description;

	  $mainEntityOfPage = [
      '@type' => 'WebPage',
      '@id' => \Drupal\Core\Url::fromRoute('<current>',array(),array('absolute'=>'true'))->toString()
    ];
    $items['mainEntityOfPage'] = $mainEntityOfPage;


    $articleBody = '';
	  $body = $node->get('body')->getValue();
	  if ($body && isset($body[0]["value"])){
      $articleBody = str_replace(array("\n","\r"), '', strip_tags($body[0]["value"]));
    }
    $items['articleBody'] = $articleBody;


    $articleSection = '';
	  $section = $node->get('field_vactory_news_theme')->getValue();
    if ($section && isset($section[0]["target_id"])){
      $term = Term::load($section[0]["target_id"]);
      $articleSection = $term->getName();
    }
    $items['articleSection'] = $articleSection;


    $abstract = '';
    $excerpt = $node->get('field_vactory_excerpt')->getValue();
    if ($excerpt && isset($excerpt[0]["value"])){
      $abstract = str_replace(array("\n","\r"), '', strip_tags($excerpt[0]["value"]));
    }
    $items['abstract'] = $abstract;

    $image_src = '';
    $image = $node->get('field_vactory_media')->getValue();
    if ($image && isset($image[0]["target_id"])){
      $media = File::load($image[0]["target_id"]);
      $image_src  = file_create_url($media->getFileUri());
    }
    $items['image'] = $image_src;


    $speakable = [
      '@type' => 'SpeakableSpecification',
      'cssSelector' => []
    ];
    $classes = $node->get('node_class')->getValue();
    $body_classes = $node->get('node_body_class')->getValue();
    $merged_classes = [];
    if(($classes && isset($classes[0]["value"])) || ($body_classes && isset($body_classes[0]["value"]))) {
      $classes_ar = [];
      $body_classes_ar = [];
      if($classes && isset($classes[0]["value"])){
        $classes_ar = explode(' ', $classes[0]["value"]);
        foreach ($classes_ar as &$class) {
          $class = '.'.$class;
        }
        unset($class);
      }

      if($body_classes && isset($body_classes[0]["value"])){
        $body_classes_ar = explode(' ', $body_classes[0]["value"]);
        foreach ($body_classes_ar as &$class) {
          $class = '.'.$class;
        }
        unset($class);
      }

      $merged_classes = array_merge ($classes_ar, $body_classes_ar);
    }
    $speakable['cssSelector'] = $merged_classes;
    $items['speakable'] = $speakable;


    $url= \Drupal\Core\Url::fromRoute('<current>',array(),array('absolute'=>'true'))->toString();
    $items['url'] = $url;


    $inLanguage = '';
    $language = $node->get('langcode')->getValue();
    if ($language && isset($language[0]["value"])){
      $inLanguage  = $language[0]["value"];
    }
    $items['inLanguage'] = $inLanguage;

    $isFamilyFriendly = true;
    $items['isFamilyFriendly'] = $isFamilyFriendly;

    $keywords = 'VOID '.node_type_load($node->bundle())->label().' ';
    $items['keywords'] = $keywords;


    $locationCreated = 'Morocco';
    $items['locationCreated'] = $locationCreated;


    $author = [
      '@type' => 'User',
      '@role' => $node->getOwner()->getRoles()[1],
      'name' => $node->getOwner()->getAccountName()
    ];
    $items['author'] = $author;

    $hasPart = [
      '@type' => 'WebPageElement',
      'isAccessibleForFree' => TRUE,
      'cssSelector' => $merged_classes
    ];
    $items['hasPart'] = $hasPart;

    $dateModified = format_date($node->getChangedTime(), 'custom', "Y-m-dTh:i:s");
    $items['dateModified'] = $dateModified;

    $datePublished = format_date($node->getCreatedTime(), 'custom', "Y-m-dTh:i:s");
    $items['datePublished'] = $datePublished;

    $publisher = [
      '@type' => 'Organization',
      '@id' => 'VOID'
    ];
    $items['publisher'] = $publisher;

    $copyrightHolder = [
      '@type' => 'Organization',
      '@id' => 'VOID'
    ];
    $items['copyrightHolder'] = $copyrightHolder;

    $copyrightYear = format_date($node->getCreatedTime(), 'custom', "Y");
    $items['copyrightYear'] = $copyrightYear;

    $isAccessibleForFree = TRUE;
    $items['isAccessibleForFree'] = $isAccessibleForFree;

  }
	$jsonld = json_encode($items, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT | JSON_UNESCAPED_UNICODE);

	if (!empty($jsonld)) {
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#value' => $jsonld,
        '#attributes' => ['type' => 'application/ld+json'],
      ],
      'structured_data',
    ];
  }
}
