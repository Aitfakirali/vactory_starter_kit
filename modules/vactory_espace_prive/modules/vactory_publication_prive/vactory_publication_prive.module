<?php

/**
 * @file
 * Primary hooks for vactory publication privÃ©.
 */

use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_theme().
 */
function vactory_publication_prive_theme() {
  return [
    // Node > card.
    'node__vactory_publication_prive__card'        => [
      'base hook' => 'node',
      'template'  => 'card',
    ],
    // Node > card inline.
    'node__vactory_publication_prive__card_inline' => [
      'base hook' => 'node',
      'template'  => 'card-inline',
    ],
    // Node > Masonry.
    'node__vactory_publication_prive__masonry'     => [
      'base hook' => 'node',
      'template'  => 'masonry',
    ],
    // Node > full.
    'node__vactory_publication_prive__full'        => [
      'base hook' => 'node',
      'template'  => 'full',
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function vactory_publication_prive_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  if ($node->getType() == 'vactory_publication_prive') {
    if (isset($node->field_vactory_image)) {
      $node->field_vactory_image[0]->title = $node->label();
    }
    $is_accessible = Drupal::service('vactory_publication_prive.access_manager')->isAccessible($node);
    if (!$is_accessible) {
      throw new NotFoundHttpException();
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function vactory_publication_prive_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'vactory_publication_prive') {
    foreach ($view->result as $key => $result) {
      $is_accessible = Drupal::service('vactory_publication_prive.access_manager')->isAccessible($result->_entity);
      if (!$is_accessible) {
        unset($view->result[$key]);
      }
    }
  }
}
